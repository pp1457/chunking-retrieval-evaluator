question,key sentences,keywords,answer,file,page
What is the structure of a Segment Tree used for efficient range queries and modifications?,"We can take a divide-a nd-c onquer approach when it comes  to array segment s.; Each of these two halves in turn are split in half, and so on until all segment s reach size .",Segment Tree; divide-a nd-c onquer; array segment s,The structure of a Segment Tree involves a divide-a nd-c onquer approach where each segment is split into two halves until reaching the desired size.,data/Segment_Tree.pdf,0
What is the time complexity for computing sum queries in a Segment Tree?,"We can view these segment s as forming a binary tree: the root of this tree is the segment   , and each vertex (except leaf vertices) has exactly two child vertices.; This is why the data  O(logn)  O(log2n) 4n n a[0…n−1] l r ∑r i=la[i] a[i]=x",logn; log2n; 4n,O(logn),data/Segment_Tree.pdf,0
What is the structure of a Segment Tree?,"We can take a divide-a nd-c onquer approach when it comes  to array segment s.; We compute and store the sum of the element s of the whole array, i.e. the sum of the segment  .; This is why the data a[l…r]  O(logn) ; Each of these two halves in turn are split in half, and so on until all segment s reach size  .; We can view these segment s as forming a binary tree: the root of this tree is the segment  ,",Segment Tree; divide-a nd-c onquer,"A Segment Tree uses a divide-a nd-c onquer approach to compute and store sums of array segments, resulting in a binary tree structure.",data/Segment_Tree.pdf,0
What is the structure called that only requires a linear number of vertices? ,"structure is called ""Seg ment  Tree"", even though in most implement ations the tree is not constructed explicitly (see Implement ation).",Segment  Tree,Segment  Tree,data/Segment_Tree.pdf,1
What is the value stored at each node in a Segment Tree?,"Before constructing the segment tree, we need to decide: 1. the value that gets stored at each node of the segment tree.; It is present at the lowermost level of a segment tree. Its value would be equal to the a=[1,3,-2,8,-7]",Segment Tree; node value,The value stored at each node in a Segment Tree is the sum of the elements in its range.,data/Segment_Tree.pdf,1
What is the value stored at each node of a Segment Tree?,"Before constructing the segment tree, we need to decide:1. the value that gets stored at each node of the segment tree.; For example, in a sum segment tree, a node would store the sum of the elements in its range.",value; node; Segment Tree,The value stored at each node of a Segment Tree is the sum of the elements in its range.,data/Segment_Tree.pdf,1
What is the time complexity of constructing a segment tree?,"For now we are going to answer sum queries. As an input we receive two integers and, and we have to compute the sum of the segment in time.; To do this, we will traverse the Segment Tree and use the precomputed sums of the segment s.",time complexity; constructing,O(logn),data/Segment_Tree.pdf,2
What is the time complexity for constructing a segment tree?,"Now, for construction of the segment tree, we start at the bottom level (the leaf vertices) and assign them their respective values.; The construction procedure, if called on a non-leaf vertex, does the following: 1. recursively construct the values of the two child vertices 2. merge the computed values of these children.",segment tree; construction,O(n),data/Segment_Tree.pdf,2
What is the time complexity for constructing a segment tree?,"Now, for construction of the segment tree, we start at the bottom level (the leaf vertices) and assign them their respective values.; The construction procedure, if called on a non-leaf vertex, does the following: 1. recursively construct the values of the two child vertices 2. merge the computed values of these children.",time complexity; segment tree,O(n),data/Segment_Tree.pdf,2
Why is the complexity of this algorithm ?,"To show this complexity we look at each level of the tree. It turns out, that for each level we only visit not more than four vertices. And since the height of the tree is , we receive the desired running time.",running time,O(logn),data/Segment_Tree.pdf,3
What is the complexity of the Segment Tree algorithm?,"We can show that this proposition (at most four vertices each level) is true by induction.; At the ˇrst level, we only visit one vertex, the root vertex, so here we visit less than four vertices.",Segment Tree; complexity,O(logn),data/Segment_Tree.pdf,3
Why is the complexity of this algorithm O(logn)?,"To show this complexity we look at each level of the tree.; It turns out, that for each level we only visit not more than four vertices.",logn,The complexity of this algorithm is O(logn) because it visits at most 4 vertices per level in a balanced binary search tree.,data/Segment_Tree.pdf,3
How can one efficiently store a Segment Tree?,"Of course we can define a struct and create objects, that store the boundaries of the segment, its sum and additionally also pointers to its child vertices.; However, this requires storing a lot of redundant information in the form of pointers.; We will use a simple trick to make this a lot more efficient by using an implicit data structure: Only storing the sums in an array.",efficient storage; Segment Tree,Using an implicit data structure to store only the sums in an array.,data/Segment_Tree.pdf,4
How is the Segment Tree implemented?,"Of course we can define a struct and create objects, that store the boundaries of the segment, its sum and additionally also pointers to its child vertices.; However, this requires storing a lot of redundant information in the form of pointers.",Segment Tree; struct,Using a simple trick by only storing the sums in an array.,data/Segment_Tree.pdf,4
How is the Segment Tree implemented to store sums in an array?,"We will use a simple trick to make this a lot more e·cient by using an implicit data structure: Only storing the sums in an array.; The sum of the root vertex at index 1, O(logn) a[i]=x a[i] O(logn) a[i] a[2]=3",Segment Tree; sums in an array,by using an implicit data structure: Only storing the sums in an array.,data/Segment_Tree.pdf,4
What is the purpose of the Segment Tree?,It simplifies the implementation a lot.; We don't need to store the structure of the tree in memory.; We only need one array which contains the sums of all segments.,Segment Tree; implementation,to simplify the implementation,data/Segment_Tree.pdf,5
How does the Segment Tree simplify implementation?,This simpliifies the implement ation a lot.; We don't need to store the structure of the tree in memo ry.,simplifies,by not storing the structure of the tree in memory.,data/Segment_Tree.pdf,5
What is the main concept behind Segment Trees?,"This simplifies the implementation a lot.; We store the Segment Tree simply as an array with a size of four times the input size:], ",Segment Trees; implementation,The main concept behind Segment Trees is to simplify their implementation.,data/Segment_Tree.pdf,5
How can the memory consumption be reduced in a Segment Tree?,Using this traversal the children of vertex are and respectively.; It is obvious that the left child will have the index .,memory; Segment Tree,"By renumbering the vertices of the tree in the order of an Euler tour traversal, we can reduce the necessary memory.",data/Segment_Tree.pdf,6
How does the Segment Tree reduce memory consumption?,Most people use the implementation from the previous section.; Using this traversal the children of vertex are and respectively.,memory; Segment Tree,"By renumbering the vertices in an Euler tour traversal, reducing necessary memory to .",data/Segment_Tree.pdf,6
How can Segment Trees be optimized to reduce memory consumption?,"Most people use the implementation from the previous section.; Using this traversal the children of vertex are and respectively.; Let's look at a vertex at index , and let it be responsible for the segment  , and let .; By this numbering we achieve a reduction of the necessary memo ry to .",Segment Trees; memory consumption,"By renumbering the vertices in the order of an Euler tour traversal, memory consumption can be reduced.",data/Segment_Tree.pdf,6
What was the name of the person who created Python?,"Python is a high-level, interpreted programming language.; It was created by Guido van Rossum and first released in 1991.",Guido van Rossum,Guido van Rossum,data/Segment_Tree.pdf,7
What is the maximum number of occurrences of a word in any segment of the provided text?,Finding the maximum and the number of times it appears This task is very similar to the previous one.; In addition to the maximum we also store the number of occurrences of it in the corresponding segment.,,the maximum number of occurrences,data/Segment_Tree.pdf,7
How does the tree structure handle updates?,Of course this problem can be easily changed into computing the minimum instead of the maximum.; Determining the correct pair to store at can still be done in constant time using the information of the pairs stored at the child vertices.,tree; structure; updates,"The tree structure handles updates by storing a pair of numbers at each vertex, including the new value and its frequency.",data/Segment_Tree.pdf,7
What is the time complexity for searching for an array prefix with a given amount using Segment Trees?,"This task can be solved using binary search, computing the sum of the preixes with the Segment Tree.",Segment Tree,O(log2n),data/Segment_Tree.pdf,8
What is the time complexity for searching an array prefix with a given amount using a Segment Tree?,"This task can be solved using binary search, computing the sum of the prefixes with the Segment Tree.",Segment Tree; binary search,O(log2n),data/Segment_Tree.pdf,8
How can we compute the greatest common divisor/least common multiple of all numbers in a given range?,In this problem we want to compute the GCD/LCM of all numbers of given ranges of the array.; This interesting variation of the Segment Tree can be solved in exactly the same way as the Segment Trees we derived for sum/minimum/maximum queries: it is enough to store the GCD/LCM of the corresponding vertex in each vertex of the tree.,Greatest Common Divisor; Least Common Multiple,"Using a Segment Tree, where each node stores the GCD or LCM of its children and leaf nodes.",data/Segment_Tree.pdf,8
What is the time complexity of building a Segment Tree?,"This time we will store four values for each vertex: the sum of the segment, the maximum prex sum, the maximum sux sum, and the sum of the maximal subsegment in it.; We compute it in a recursive fashion: we first compute all four values for the left and the right child, and then combine those to archive the four values for the current vertex.",Segment Tree; time complexity,O(logn),data/Segment_Tree.pdf,9
How is the maximum subsegment in an array computed using a Segment Tree?,"This problem is a non-trivial usage of a Segment Tree.; We store four values for each vertex: the sum of the segment, the maximum pre\xfx sum, the maximum su\xfx sum, and the sum of the maximal subsegment in it.",Segment Tree; maximum subsegment,The maximum subsegment is computed by combining the maximum pre\xfx sum of the left child with the maximum su\xfx sum of the right child.,data/Segment_Tree.pdf,9
What is the implementation detail for initializing a leaf vertex in the Segment Tree?,"It only remains, how to compute the answer to a query.; We can implement it in exactly the same way as in the previous implementations.",Segment Tree; initialize leaf vertex,The function make_data is used for initializing a leaf vertex in the Segment Tree.,data/Segment_Tree.pdf,10
How does the Segment Tree function work in terms of combining data?,"It only remains, how to compute the answer to a query.; To answer it, we go down the tree as before, breaking the query into several subsegments that coincide with the segments of the Segment Tree, and combine the answers in them into a single answer for the query.",,By combining data from the left and right child using the function to compute the maximum of these three values.,data/Segment_Tree.pdf,10
What is the purpose of the auxiliary function in Segment Tree implementation?,"Using the function it is easy to build the Segment Tree. We can implement it in exactly the same way as in the previous implementations.; To initialize the leaf vertices, we additionally create the auxiliary function, which will return a object holding the information of a single value.",auxiliary function,Initialization of leaf vertices,data/Segment_Tree.pdf,10
How to build such a Segment Tree as effectively as possible?,"We construct a Segment Tree. In each vertex we store a sorted list of all numbers occurring in the corresponding segment, like described above.",Segment Tree,Combine the two sorted lists into one by iterating over them using two pointers.,data/Segment_Tree.pdf,11
What is the memory consumption of a Segment Tree with element storage?,In its simplest application of this technique we store the elements in sorted order.; Each vertex requires linear memory (i.e. proportional to the length of the corresponding segment).,memory consumption; Segment Tree; elements,The complete tree will only need memory.,data/Segment_Tree.pdf,11
How do Segment Trees store information?,"This is a separate subsection that stands apart from the others, because at each vertex of the Segment Tree we don't store information about the corresponding segment in compressed form (sum, minimum, maximum, ...), but store all element s of the segment .",Segment Tree; vertices; compressed form,Each vertex stores all elements of the segment.,data/Segment_Tree.pdf,11
What is the time complexity for querying in a Segment Tree?,"This task is similar to the previous. The last approach has a disadvantage, it was not possible to modify the array between answering queries.",time complexity,O(logn),data/Segment_Tree.pdf,12
What is the time complexity for answering queries in a Segment Tree?,"We are at some vertex of the Segment Tree and we want to compute the answer to the query, i.e. find the minimum number greater that or equal to a given number.; Thus the answer to the query in one segment of the tree takes O(logn) time, and the entire query is processed in O(nlogn).",Segment Tree; queries; time complexity; logn; nlogn,O(nlogn),data/Segment_Tree.pdf,12
What is the time complexity for modifying a Segment Tree?,This task is similar to the previous.; Now we want to do exactly this: a modification query will do.,Segment Tree; modification,O(nlogn),data/Segment_Tree.pdf,12
What is the time complexity for modifying a number in a Segment Tree?,"The  function is also almost equivalent, only now the  function of the  function should be called instead (  only works in  time if used with random-access iterators).; Processing of this modiication query also takes O(logn) time.",time complexity; modifying a number,O(logn),data/Segment_Tree.pdf,13
What is the time complexity for the update function in Segment Tree?,"We have the same problem statement , we want to  find the minimal number greater than or equal to  in a segment , but this time in  time. We will improve the time complexity using the technique 'fractional cascading'.",time complexity; update function,O(log2n),data/Segment_Tree.pdf,13
What is the time complexity for processing a modification query in a Segment Tree?,"The construction of such a Segment Tree is done in pretty much the same way as in the previous problem, only now we need to combine s and not sorted lists.; Finally the modiification request. To process it, we must go down the tree, and modify all  from the corresponding segment s that contain the affected element.",Segment Tree; modication query,O(log2n),data/Segment_Tree.pdf,13
How does the Segment Tree speed up queries?,"Instead of performing a binary search for each list, we could merge all lists into one big sorted list.; Using this structure it is only necessary to store two indices, the index of the element in the original list, and the index of the element in the following new list.",Segment Tree; binary search,It speeds up queries by avoiding all except one binary search in every node.,data/Segment_Tree.pdf,14
How does the Segment Tree technique speed up queries?,"It is straightforward to apply this technique to a problem, that doesn't require any modi–cation queries.; Instead of intėegers, you need to store the sorted array as multiset, and instead of indices you need to store iterators.",Segment Tree; queries,"It uses three times more memory than a normal Merge Sort Tree, which already uses a lot of memory.",data/Segment_Tree.pdf,14
How does the Segment Tree technique speed up queries?,"Instead of performing a binary search for each list, we could merge all lists into one big sorted list.; This mea ns the complexity for answering a query is .",Segment Tree; binary search; queries,"It uses three times more memo ry than a normal Merge Sort Tree, which already uses a lot of memo ry, but it speeds up queries to O(logn).",data/Segment_Tree.pdf,14
What is the primary application of Segment Trees in competitive programming?,This technique implies a whole new class of possible applications.; Range updates (Lazy Propagation); Addition on segments,Segment Trees; competitive programming; modiification queries,Modifying data structures and answering range queries efficiently.,data/Segment_Tree.pdf,15
What is the complexity for retrieving a specific value from a Segment Tree?,"If now there comes a query that asks the current value of a particular array entry, it is enough to go down the tree and add up all values found along the way.",Segment Tree,O(logn),data/Segment_Tree.pdf,15
What is the time complexity for calculating updates in a Segment Tree?,"If there comes a query that asks the current value of a particular array entry, it is enough to go down the tree and add up all values found along the way.",time complexity; Segment Tree,O(logn),data/Segment_Tree.pdf,15
How does the Segment Tree handle modi¬cation queries?,"To perform this modi¬cation query on a whole segment , you have to store at each vertex of the Segment Tree whether the corresponding segment  is covered entirely with the same value or not.; After the modi¬cation query is executed, some parts of the tree become irrelevant - some  modi¬cations rema in unful¬lled in it.",modi¬cation; Segment Tree,The Segment Tree handles modi¬cation queries by storing information at each vertex that indicates whether a segment is covered entirely with the same value or not. This allows for 'lazy' updates and efficient processing of modi¬cation queries.,data/Segment_Tree.pdf,16
What modifications can be applied to a Segment Tree?,"We need to make a function, which will receive the current vertex, and it will push the information for its vertex to both its children.; For the implement ation we need to make a  function, which will receive the current vertex, and it will push the information for its vertex to both its children.",Segment Tree; push function,Pushing information from each vertex to its children during descent along the tree.,data/Segment_Tree.pdf,16
How do we apply delayed modifications in a Segment Tree to ensure the complexity remains O(logn)?,"For the implement ation we need to make a  function, which will receive the current vertex, and it will push the information for its vertex to both its children.; We will call this function at the beginning of the query functions (but we will not call it from the leaves, because there is no need to push information from them any further).",Segment Tree; delayed modifications; complexity O(logn),Apply delayed modifications by pushing the information for each vertex into both its children at the beginning of query functions.,data/Segment_Tree.pdf,16
What is the value stored at vertex 0?,"Now the modişication query is to add a number to all element s in a range, and the reading query is to ķnd the maximum in a range.; For this purpose we keep store an additional value for each vertex. In this value we store the addends we haven't propagated to the child vertices.",vertex 0; modişication; reading,The value stored at vertex 0 is not specified in the provided context.,data/Segment_Tree.pdf,17
What modification query do we have to perform on each vertex in the Segment Tree?,For this purpose we keep store an additional value for each vertex.; In this value we store the addends we haven't propagated to the child vertices.,modification query; vertex,update,data/Segment_Tree.pdf,17
What is the function used for query and modification in a Segment Tree? ,For this purpose we keep store an additional value for each vertex.; We have to do this in both the function and the function.,Segment Tree,The function used for query and modification is update.,data/Segment_Tree.pdf,17
What is the generalization of a Segment Tree to higher dimensions?,"A Segment Tree can be generalized quite natural to higher dimensions.; If in the one-dimensional case we split the indices of the array into segments, then in the two-dimensional we make an ordinary Segment Tree with respect to the first indices, and for each segment we build an ordinary Segment Tree with respect to the second indices.",Segment Tree; higher dimensions,The generalization of a Segment Tree to higher dimensions involves constructing a tree that respects both coordinates in two-dimensional space.,data/Segment_Tree.pdf,18
What is the purpose of segmenting coordinates in a 2D Segment Tree?,"A Segment Tree can be generalized quite natural to higher dimensions.; In the two-dimensional we make an ordinary Segment Tree with respect to the first indices, and for each segment we build an ordinary Segment Tree with respect to the second indices.",Segment Tree; coordinates,"The purpose of segmenting coordinates in a 2D Segment Tree is to enable the construction of a Segment Tree using the first coordinate, which represents a strip, and then building a Segment Tree for each segment along the second coordinate.",data/Segment_Tree.pdf,18
How is the Segment Tree generalized to higher dimensions?,"A Segment Tree can be gener alized quite natural to higher dimens ions.; If in the one-di mens ional case we split the indices of the array into segment s, then in the two-dimens ional we make an ordinary Segment Tree with respect to the  rst indices, and for each segment we build an ordinary Segment Tree with respect to the second indices.",Segment Tree; higher dimensions,natural,data/Segment_Tree.pdf,18
How does the described procedure for querying work in the context of Segment Trees?,"We will answer to the two-dimensional query using the same principle:  first break the query on the first coordinate, and then for every reached vertex, we call the corresponding Segment Tree of the second coordinate.",querying,"It works by first breaking the query on the first coordinate, and then for every reached vertex, it calls the corresponding Segment Tree of the second coordinate.",data/Segment_Tree.pdf,19
What is the time complexity for processing queries in Segment Trees?,"This function works in O(time, since it first descends the tree in the first coordinate, and for each traversed vertex in the tree it makes a query in the corresponding Segment Tree along the second coordinate.",time; queries; Segment Trees,O(lognlogm),data/Segment_Tree.pdf,19
How does the Segment Tree function work in terms of time complexity?,"Such a Segment Tree still uses a linear amount of memo ry, but with a larger constant: . It is clear that the described procedure also works in linear time.; This function works in O(lognlogm) time, since it first descends the tree in the first coordinate, and for each traversed vertex in the tree it makes a query in the corresponding Segment Tree along the second coordinate.",Segment Tree; time complexity,O(lognlogm),data/Segment_Tree.pdf,19
How to modify the Segment Tree according to the change in the value of some element?,"We want to learn how to modify the Segment Tree in accordance with the change in the value of some element.; Therefore the implementation will be not very different from the one-dimensional case, only now we first descend the first coordinate, and then the second.",Segment Tree; modification,The modification involves constructing a two-dimensional Segment Tree where each vertex stores a Segment Tree constructed by points within its interval on the second coordinate.,data/Segment_Tree.pdf,20
How do you modify the Segment Tree according to a change in the value of some element?,"It is clear, that the changes will occur only in those vertices of the first Segment Tree that cover the coordinate (and such will be )",Segment Tree; change in value,Modify the Segment Tree by updating the vertex that covers the changed coordinate.,data/Segment_Tree.pdf,20
How does the compression of a 2D Segment Tree reduce memory usage?,It is clear that in the case of such a problem it becomes unreasonably wasteful to construct a two-dimens dimensional Segment Tree with element s.; Thus we will achieve that each Segment Tree on the second coordinate will occupy exactly as much memo ry as it should.,compression; 2D Segment Tree,"By storing a Segment Tree constructed only by those second coordinates that occur in the current segment of the first coordinates, reducing the total 'useful' size of all tree segments.",data/Segment_Tree.pdf,20
How is the Segment Tree converted into a persistent data structure?,"This allows to access any version of this data structure that interest us and execute a query on it.; So if we store the Segment Tree using pointers (i.e. a vertex stores pointers to the left and the right child vertices).; New vertices will be created, including a new root vertex of the Segment Tree.",persistent; Segment Tree,"By storing the Segment Tree using pointers, where each vertex stores pointers to its left and right child vertices.",data/Segment_Tree.pdf,21
"What is the time complexity for the simplest Segment Tree implementation when there are queries asking for sums, and modification queries of single elements?","when there is only a query asking for sums, and modification queries of single elements.",time complexity; Segment Tree,O(logn),data/Segment_Tree.pdf,21
What is the time complexity for a single query in the persistent Segment Tree?,We will accomplish the same task using a persistent Segment Tree in.; First we will discuss a solution for a simpler problem: We will only consider arrays in which the element s are bound by . And we only want to  nd the -th smallest element  in some pre x of the array.,persistent Segment Tree; single query,O(1),data/Segment_Tree.pdf,22
How is the -th smallest number in a range found using a Segment Tree?,We will discuss a solution for a simpler problem: We will only consider arrays in which the element s are bound by . And we only want to  find the -th smallest element  in some prex of the array.; In other words we create a regular Segment Tree with sum queries over the histogram of the array.,Segment Tree; -th smallest number,"Using a Segment Tree, you can find the -th smallest number in a range by creating a persistent data structure that counts all appearing numbers and then querying it for the position of the -th element.",data/Segment_Tree.pdf,22
"How can we build a persistent Segment Tree over an array with elements in the range [0, MAX_VALUE]?","We need to store the root of the initial Segment Tree, and also all the roots after each update.; Here is the code for building a persistent Segment Tree over an vector a with element s in the range [0, MAX_VALUE].; Now to the restrictions on the array elemen ts: We can actually transform any array to such an array by index compression.",persistent Segment Tree; array with elements; MAX_VALUE,We build it by storing the root of the initial Segment Tree and updating all roots after each update.,data/Segment_Tree.pdf,23
How is the Segment Tree built in terms of recursion?,"It is easy to see that such a Segment Tree is just the difference between the Segment Tree rooted at and the Segment Tree rooted at, i.e. every vertex in the Segment Tree can be computed with the vertex of the tree minus the vertex of the tree.; Here are the modified , and functions",Segment Tree; recursion,The Segment Tree is built recursively.,data/Segment_Tree.pdf,23
How can we find the 5th smallest number from a subarray?,"It is easy to see that such a Segment Tree is just the difference between the Segment Tree rooted at and the Segment Tree rooted at, i.e. every vertex in the Segment Tree can be computed with the vertex of the tree minus the vertex of the tree.; Now to the restrictions on the array elements: We can actually transform any array to such an array by index compression.",Segment Tree; 5th smallest,find_kth,data/Segment_Tree.pdf,23
What is the purpose of creating a segment tree lazily?,"We can solve this problem by creating a segment tree lazily (incrementally).; Initially, we will create only the root, and we will create the other vertexes only when we need them.",segment tree; lazy,"The purpose is to create the segment tree incrementally, only as needed, starting with the root.",data/Segment_Tree.pdf,24
What is the complexity of query operations in a dynamic segment tree?,"We can solve this problem by creating a segment tree lazily (incrementally). Initially, we will create only the root, and we will create the other vertices only when we need them.; Each query has still only the complexity , which is small enough for most use-cases.",dynamic; segment tree; query operations,O(logn),data/Segment_Tree.pdf,24
What is the data structure used to implement dynamic segment trees?,"Dynamic segment tree; Called so because its shape is dynamic and the nodes are usually dynamically allocated.; Previously, we considered cases when we have the ability to build the original segment tree.",dynamic segment tree,Dynamic segment tree,data/Segment_Tree.pdf,24
How do you implement range updates via lazy propagation?,Obviously this idea can be extended in lots of different ways.; E.g. by adding support for range updates via lazy propagation.,range updates; lazy propagation,You can implement range updates via lazy propagation by extending the idea to add support for such updates.,data/Segment_Tree.pdf,25
How can this idea be extended?,This idea can be extended in lots of different ways.; E.g. by adding support for range updates via lazy propagation.,lazy propagation,by adding support for range updates via lazy propagation.,data/Segment_Tree.pdf,25
